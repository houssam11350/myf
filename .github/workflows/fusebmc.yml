name: FuSeBMC Analysis XX
on:
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Run privileged command
      run: |
        sudo sh -c 'echo core > /proc/sys/kernel/core_pattern'

    - name: Get changed files
      id: changed-files
      run: |
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          git fetch origin ${{ github.base_ref }}
          changed_files=$(git diff --name-only --diff-filter=ACMRT origin/${{ github.base_ref }} ${{ github.sha }} | grep -E '\.c$|\.i$' || true)
        elif [ "${{ github.event_name }}" == "push" ]; then
          if git rev-parse --verify HEAD^1 >/dev/null 2>&1; then
            changed_files=$(git diff --name-only --diff-filter=ACMRT HEAD^1 HEAD | grep -E '\.c$|\.i$' || true)
          else
            changed_files=$(git ls-tree -r --name-only HEAD | grep -E '\.c$|\.i$' || true)
          fi
        else
          changed_files=$(git ls-tree -r --name-only HEAD | grep -E '\.c$|\.i$' || true)
        fi
        echo "Changed files:"
        echo "$changed_files"
        echo "files<<EOF" >> $GITHUB_OUTPUT
        echo "$changed_files" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Run FuSeBMC on changed C files
      id: fusebmc-analysis
      run: |
        echo  ${{ github.workspace }}/sarif_output  
        vulnerabilities_found=false
        ls -l
        echo  "XXXsarif_outputXXXX"
        ls -l ./sarif_output/*.*
        
    - name: Upload SARIF files for Code Scanning
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: ./sarif_output/argcargv.sarif

    - name: Fail if vulnerabilities found
      #if: steps.fusebmc-analysis.outputs.vulnerabilities_found == 'true'
      run: |
        echo "Vulnerabilities were found. Pipeline failed."
        exit 2
